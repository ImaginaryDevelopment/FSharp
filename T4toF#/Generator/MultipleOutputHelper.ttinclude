<#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="EnvDTE80"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System"
#><#@ import namespace="System.CodeDom"
#><#@ import namespace="System.CodeDom.Compiler"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Data.Linq"
#><#@ import namespace="System.Data.Linq.Mapping"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Xml.Linq"
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"
#><#+

// Manager class records the various blocks so it can split them up
class Manager {
    private class Block {
        public String Name;
        public int Start, Length;
		public bool IsRelative;
		public String ProjectName;
		public String FileName;
		public String Wd;
    }

    private Block currentBlock;
    private List<Block> files = new List<Block>();
    private Block footer = new Block();
    private Block header = new Block();
    private ITextTemplatingEngineHost host;
    private StringBuilder template;
    private List<Block> generatedBlocks = new List<Block>();

    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    }

    public void StartNewFile(String name, string projectName=null) {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name = name, ProjectName=projectName };
    }

    public void StartFooter() {
        CurrentBlock = footer;
    }

    public void StartHeader() {
        CurrentBlock = header;
    }

    public void EndBlock() {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }

    public virtual void Process(bool split) {
        if (split) {
            EndBlock();
            String headerText = template.ToString(header.Start, header.Length);
            String footerText = template.ToString(footer.Start, footer.Length);
            String outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            foreach(Block block in files) {
				if(block.Name.Contains(".."))
					block.IsRelative=true;
				block.FileName = block.IsRelative ? 
					Path.GetFullPath(Path.Combine(outputPath, block.Name)) : 
					Path.Combine(outputPath, block.Name);
				block.Wd = outputPath;
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                generatedBlocks.Add(block);
                CreateFile(block.FileName, content);
                template.Remove(block.Start, block.Length);
            }
        }
    }

    protected virtual void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }

    public virtual String GetCustomToolNamespace(String fileName) {
        return null;
    }

    public virtual String DefaultProjectNamespace {
        get { return null; }
    }

    protected bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock {
        get { return currentBlock; }
        set {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }

    private class VSManager: Manager {
        private EnvDTE.ProjectItem templateProjectItem;
        private EnvDTE.DTE dte;
        private Action<String> checkOutAction;
        private Action<IEnumerable<Block>> projectSyncAction;

        public override String DefaultProjectNamespace {
            get {
                return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            }
        }

        public override String GetCustomToolNamespace(string fileName) {
            return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        }

        public override void Process(bool split) {
            if (templateProjectItem.ProjectItems == null)
                return;
            base.Process(split);
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedBlocks, null, null));
        }

        protected override void CreateFile(String fileName, String content) {
            if (IsFileContentDifferent(fileName, content)) {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template) {
            var hostServiceProvider = (IServiceProvider) host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
                throw new ArgumentNullException("Could not obtain DTE from host");
            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = (IEnumerable<Block> keepBlocks) => ProjectSync(dte,templateProjectItem, keepBlocks);
        }

        private static void ProjectSync(EnvDTE.DTE dte, EnvDTE.ProjectItem templateProjectItem, IEnumerable<Block> keepBlocks) {
			var projects = RecurseSolutionProjects(dte);
            //var keepFileNameSet = new HashSet<String>(keepFileNames);
            var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
			var templateProjectItemPath = templateProjectItem.get_FileNames(0);
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
            foreach(EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                projectFiles.Add(projectItem.get_FileNames(0), projectItem);

            // Remove unused items from the project
			// TODO: adjust to remove files that were in other projects
            foreach(var pair in projectFiles)
                if (!keepBlocks.Select(b=>b.FileName).Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                    pair.Value.Delete();

            // Add missing files to the project
            foreach(Block keepBlock in keepBlocks){
				if(string.IsNullOrEmpty(keepBlock.ProjectName) && !projectFiles.ContainsKey(keepBlock.FileName))
                    templateProjectItem.ProjectItems.AddFromFile(keepBlock.FileName);
                if(string.IsNullOrEmpty(keepBlock.ProjectName)==false){
					
					string projectFullPath =System.IO.Path.Combine( System.IO.Path.GetDirectoryName(keepBlock.FileName),keepBlock.ProjectName);
					var project = projects.First(p=>p.FullName==projectFullPath);
					//&& dte.Solution.FindProjectItem(keepBlock.FileName)==null /* check if the file by full path exists in the solution already */ 
					//add to the other Project, assumes in root project directory currently

					
					EnvDTE.ProjectItem projItem =dte.Solution.FindProjectItem(projectFullPath);
					System.Diagnostics.Trace.WriteLine(projectFullPath);
					if(project.ProjectItems.Item(keepBlock.FileName)==null)
						project.ProjectItems.AddFromFile(keepBlock.FileName);
				}
			}

        }
		static IEnumerable<EnvDTE.Project> RecurseSolutionProjects(EnvDTE.DTE dte){
	
    	EnvDTE.Projects projects = dte.Solution.Projects;
    	List<EnvDTE.Project> list = new List<EnvDTE.Project>();
    	var item = projects.GetEnumerator();
    	while (item.MoveNext())
    	{
    		var project = item.Current as EnvDTE.Project;
    		if (project == null)
    		{
    			continue;
    		}
    		if (project.Kind == EnvDTE80.ProjectKinds.vsProjectKindSolutionFolder)
    		{
    			list.AddRange(GetSolutionFolderProjects(project));
    		}
    		else
    		{
    			list.Add(project);
    		}
    	}
        return list;
    }
    static IEnumerable<EnvDTE.Project> GetSolutionFolderProjects(EnvDTE.Project solutionFolder)
    {
        List<EnvDTE.Project> list = new List<EnvDTE.Project>();
        for (var i = 1; i <= solutionFolder.ProjectItems.Count; i++)
        {
            var subProject = solutionFolder.ProjectItems.Item(i).SubProject;
            if (subProject == null)
            {
                continue;
            }
            // If this is another solution folder, do a recursive call, otherwise add
            if (subProject.Kind == EnvDTE80.ProjectKinds.vsProjectKindSolutionFolder)
            {
                list.AddRange(GetSolutionFolderProjects(subProject));
            } else {
                list.Add(subProject);
            }
        }
        return list;
    }
        private void CheckoutFileIfRequired(String fileName) {
            var sc = dte.SourceControl;
            if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }
    }
} #>